/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package tm;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.SwingUtilities;

/**
 *
 * @author ivo
 */
public class CommandLineBuilderPanel extends javax.swing.JPanel {

    private ArrayList<String> args = new ArrayList<>();
    
    /**
     * Creates new form CommandLineBuilderPanel
     */
    public CommandLineBuilderPanel() {
        initComponents();
        buildCommandLine();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.dir")));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        buttonGroup2 = new javax.swing.ButtonGroup();
        assemblerFile = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tapeFromAsm = new javax.swing.JRadioButton();
        tapeFromFile = new javax.swing.JRadioButton();
        tapeFileButton = new javax.swing.JButton();
        tapeFromInput = new javax.swing.JRadioButton();
        tapeString = new javax.swing.JTextField();
        showParsedCode = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        showCompiledStates = new javax.swing.JCheckBox();
        toUniversal = new javax.swing.JCheckBox();
        runMachine = new javax.swing.JCheckBox();
        compactOutput = new javax.swing.JCheckBox();
        outputWidth = new javax.swing.JTextField();
        outputFile = new javax.swing.JTextField();
        outputFileButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        commandLine = new javax.swing.JTextField();
        runButton = new javax.swing.JButton();
        quitButton = new javax.swing.JButton();
        tapeFile = new javax.swing.JTextField();
        redirectOutput = new javax.swing.JCheckBox();
        useWidth = new javax.swing.JCheckBox();
        limitSteps = new javax.swing.JCheckBox();
        limitStepsField = new javax.swing.JTextField();
        stopButton = new javax.swing.JButton();
        translateAlphabet = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        translateSource = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        translateDestination = new javax.swing.JTextField();

        assemblerFile.setText("please choose...");
        assemblerFile.setEnabled(false);
        assemblerFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assemblerFileActionPerformed(evt);
            }
        });

        browseButton.setText("Choose...");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Assembler file to read");

        jLabel2.setText("Tape");

        buttonGroup2.add(tapeFromAsm);
        tapeFromAsm.setSelected(true);
        tapeFromAsm.setText("from Assembler file");
        tapeFromAsm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tapeFromAsmActionPerformed(evt);
            }
        });

        buttonGroup2.add(tapeFromFile);
        tapeFromFile.setText("from file (-T):");
        tapeFromFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tapeFromFileActionPerformed(evt);
            }
        });

        tapeFileButton.setText("Choose...");
        tapeFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tapeFileButtonActionPerformed(evt);
            }
        });

        buttonGroup2.add(tapeFromInput);
        tapeFromInput.setText("Input (-t)");
        tapeFromInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tapeFromInputActionPerformed(evt);
            }
        });

        tapeString.setText("111");
        tapeString.setEnabled(false);
        tapeString.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                tapeStringCaretUpdate(evt);
            }
        });
        tapeString.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tapeStringActionPerformed(evt);
            }
        });
        tapeString.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tapeStringPropertyChange(evt);
            }
        });
        tapeString.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tapeStringKeyTyped(evt);
            }
        });

        showParsedCode.setText("Show parsed code (-p)");
        showParsedCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showParsedCodeActionPerformed(evt);
            }
        });

        jLabel3.setText("Options");

        showCompiledStates.setText("Show compiled states (-s)");
        showCompiledStates.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showCompiledStatesActionPerformed(evt);
            }
        });

        toUniversal.setText("Output the machine specifications for the universal machine (-u)");
        toUniversal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toUniversalActionPerformed(evt);
            }
        });

        runMachine.setSelected(true);
        runMachine.setText("Run the machine (-r)");
        runMachine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runMachineActionPerformed(evt);
            }
        });

        compactOutput.setText("compact output (-c)");
        compactOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compactOutputActionPerformed(evt);
            }
        });

        outputWidth.setText("80");
        outputWidth.setEnabled(false);
        outputWidth.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                outputWidthCaretUpdate(evt);
            }
        });
        outputWidth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputWidthActionPerformed(evt);
            }
        });
        outputWidth.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                outputWidthPropertyChange(evt);
            }
        });

        outputFile.setText("output.txt");
        outputFile.setEnabled(false);

        outputFileButton.setText("Choose...");
        outputFileButton.setEnabled(false);
        outputFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputFileButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Command line options");

        commandLine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commandLineActionPerformed(evt);
            }
        });

        runButton.setText("Run!");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        quitButton.setText("Quit");
        quitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitButtonActionPerformed(evt);
            }
        });

        tapeFile.setText("please choose...");
        tapeFile.setEnabled(false);

        redirectOutput.setText("Output to file (-o)");
        redirectOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redirectOutputActionPerformed(evt);
            }
        });

        useWidth.setText("Output width (-w)");
        useWidth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useWidthActionPerformed(evt);
            }
        });

        limitSteps.setSelected(true);
        limitSteps.setText("Maximal number of steps (-m)");
        limitSteps.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limitStepsActionPerformed(evt);
            }
        });

        limitStepsField.setText("10000");
        limitStepsField.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                limitStepsFieldCaretUpdate(evt);
            }
        });
        limitStepsField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                limitStepsFieldFocusLost(evt);
            }
        });
        limitStepsField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limitStepsFieldActionPerformed(evt);
            }
        });
        limitStepsField.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                limitStepsFieldPropertyChange(evt);
            }
        });
        limitStepsField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                limitStepsFieldKeyTyped(evt);
            }
        });

        stopButton.setText("Stop!");
        stopButton.setEnabled(false);
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        translateAlphabet.setText("translate alphabet (-a)");
        translateAlphabet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                translateAlphabetActionPerformed(evt);
            }
        });

        jLabel4.setText("source:");

        translateSource.setEnabled(false);
        translateSource.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                translateSourceCaretUpdate(evt);
            }
        });

        jLabel5.setText("destination:");

        translateDestination.setEnabled(false);
        translateDestination.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                translateDestinationCaretUpdate(evt);
            }
        });
        translateDestination.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                translateDestinationActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(assemblerFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(browseButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tapeFromAsm)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tapeFromFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tapeFile, javax.swing.GroupLayout.PREFERRED_SIZE, 561, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(tapeFileButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tapeFromInput)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tapeString))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(redirectOutput)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(outputFile))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(useWidth)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(outputWidth, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(outputFileButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(commandLine))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(quitButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stopButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(runButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(limitSteps)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(limitStepsField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(compactOutput)
                            .addComponent(runMachine)
                            .addComponent(showCompiledStates)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(showParsedCode)
                            .addComponent(toUniversal)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(translateAlphabet)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(translateSource, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(translateDestination, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(browseButton)
                    .addComponent(assemblerFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tapeFromAsm)
                    .addComponent(tapeFromFile)
                    .addComponent(tapeFileButton)
                    .addComponent(tapeFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tapeFromInput)
                    .addComponent(tapeString, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showParsedCode)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(translateAlphabet)
                    .addComponent(jLabel4)
                    .addComponent(translateSource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(translateDestination, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showCompiledStates)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(toUniversal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(runMachine)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(limitSteps)
                    .addComponent(limitStepsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(compactOutput)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(outputWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(useWidth))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(outputFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(outputFileButton)
                    .addComponent(redirectOutput))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(commandLine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(runButton)
                    .addComponent(quitButton)
                    .addComponent(stopButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void assemblerFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assemblerFileActionPerformed
        buildCommandLine();
    }//GEN-LAST:event_assemblerFileActionPerformed

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            assemblerFile.setText(file.getAbsolutePath());
            buildCommandLine();
        }        
    }//GEN-LAST:event_browseButtonActionPerformed

    private void showParsedCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showParsedCodeActionPerformed
        buildCommandLine();
    }//GEN-LAST:event_showParsedCodeActionPerformed

    private void tapeFromFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tapeFromFileActionPerformed
       buildCommandLine();
    }//GEN-LAST:event_tapeFromFileActionPerformed

    private void tapeFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tapeFileButtonActionPerformed
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            tapeFile.setText(file.getAbsolutePath());
            buildCommandLine();
        }
    }//GEN-LAST:event_tapeFileButtonActionPerformed

    private void outputFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputFileButtonActionPerformed
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            outputFile.setText(file.getAbsolutePath());
            buildCommandLine();
        }
    }//GEN-LAST:event_outputFileButtonActionPerformed

    private void redirectOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redirectOutputActionPerformed
        boolean redir = redirectOutput.isSelected();
        outputFile.setEnabled(redir);
        outputFileButton.setEnabled(redir);
        buildCommandLine();
    }//GEN-LAST:event_redirectOutputActionPerformed

    private void commandLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commandLineActionPerformed
        buildCommandLine();
    }//GEN-LAST:event_commandLineActionPerformed

    private void tapeFromAsmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tapeFromAsmActionPerformed
        buildCommandLine();
    }//GEN-LAST:event_tapeFromAsmActionPerformed

    private void tapeFromInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tapeFromInputActionPerformed
        tapeString.setEnabled(tapeFromInput.isSelected());
        buildCommandLine();
    }//GEN-LAST:event_tapeFromInputActionPerformed

    private void showCompiledStatesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showCompiledStatesActionPerformed
        buildCommandLine();
    }//GEN-LAST:event_showCompiledStatesActionPerformed

    private void toUniversalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toUniversalActionPerformed
        buildCommandLine();
    }//GEN-LAST:event_toUniversalActionPerformed

    private void runMachineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runMachineActionPerformed
        buildCommandLine();
    }//GEN-LAST:event_runMachineActionPerformed

    private void compactOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compactOutputActionPerformed
        buildCommandLine();
    }//GEN-LAST:event_compactOutputActionPerformed

    private void useWidthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useWidthActionPerformed
        outputWidth.setEnabled(useWidth.isSelected());
        buildCommandLine();
    }//GEN-LAST:event_useWidthActionPerformed

    private void outputWidthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputWidthActionPerformed
        buildCommandLine();
    }//GEN-LAST:event_outputWidthActionPerformed

    private void limitStepsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limitStepsActionPerformed
        limitStepsField.setEnabled(limitSteps.isSelected());
        buildCommandLine();
    }//GEN-LAST:event_limitStepsActionPerformed

    private void limitStepsFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limitStepsFieldActionPerformed
        buildCommandLine();
    }//GEN-LAST:event_limitStepsFieldActionPerformed

    private void quitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_quitButtonActionPerformed

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        TM.stop = false;
        stopButton.setEnabled(true);
        runButton.setEnabled(false);
        Thread worker = new Thread() {
            @Override
            public void run() {
                try {
                    TM.main(args.toArray(new String[0]));
                } catch (IOException e) {
                    System.out.println(e);
                }
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        stopButton.setEnabled(false);
                        runButton.setEnabled(true);
                    }
                });
            }
        };
        worker.start();
    }//GEN-LAST:event_runButtonActionPerformed

    private void tapeStringActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tapeStringActionPerformed
        buildCommandLine();
    }//GEN-LAST:event_tapeStringActionPerformed

    private void limitStepsFieldPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_limitStepsFieldPropertyChange
        buildCommandLine();
    }//GEN-LAST:event_limitStepsFieldPropertyChange

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        TM.stop = true;
    }//GEN-LAST:event_stopButtonActionPerformed

    private void limitStepsFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_limitStepsFieldKeyTyped
        buildCommandLine();
    }//GEN-LAST:event_limitStepsFieldKeyTyped

    private void tapeStringKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tapeStringKeyTyped
        buildCommandLine();
    }//GEN-LAST:event_tapeStringKeyTyped

    private void tapeStringPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tapeStringPropertyChange
        buildCommandLine();
    }//GEN-LAST:event_tapeStringPropertyChange

    private void outputWidthPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_outputWidthPropertyChange
        buildCommandLine();
    }//GEN-LAST:event_outputWidthPropertyChange

    private void limitStepsFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_limitStepsFieldFocusLost
        buildCommandLine();
    }//GEN-LAST:event_limitStepsFieldFocusLost

    private void limitStepsFieldCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_limitStepsFieldCaretUpdate
        buildCommandLine();
    }//GEN-LAST:event_limitStepsFieldCaretUpdate

    private void tapeStringCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_tapeStringCaretUpdate
        buildCommandLine();
    }//GEN-LAST:event_tapeStringCaretUpdate

    private void outputWidthCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_outputWidthCaretUpdate
        buildCommandLine();
    }//GEN-LAST:event_outputWidthCaretUpdate

    private void translateAlphabetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_translateAlphabetActionPerformed
        translateSource.setEnabled(translateAlphabet.isSelected());
        translateDestination.setEnabled(translateAlphabet.isSelected());
        buildCommandLine();
    }//GEN-LAST:event_translateAlphabetActionPerformed

    private void translateSourceCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_translateSourceCaretUpdate
        buildCommandLine();
    }//GEN-LAST:event_translateSourceCaretUpdate

    private void translateDestinationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_translateDestinationActionPerformed
        buildCommandLine();
    }//GEN-LAST:event_translateDestinationActionPerformed

    private void translateDestinationCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_translateDestinationCaretUpdate
        buildCommandLine();
    }//GEN-LAST:event_translateDestinationCaretUpdate

    
    private void buildCommandLine() {
        File asmFile = new File(assemblerFile.getText());
        String c = "";
        args.clear();
        if (asmFile.exists()) {
            // Tape
            if (tapeFromFile.isSelected()) {
                File tf = new File(tapeFile.getText());
                if (tf.exists()) {
                    c+="-T ";
                    args.add("-T");
                    c+="'"+tapeFile.getText()+"' ";
                    args.add(tapeFile.getText());
                }
            } else if (tapeFromInput.isSelected()) {
                args.add("-t");
                c+="-t '"+tapeString.getText()+"' ";
                args.add(tapeString.getText());
            }
            // Options
            if (translateAlphabet.isSelected()) {
                c+="-a '"+translateSource.getText()+"' '"+translateDestination.getText()+"' ";
                args.add("-a");
                args.add(translateSource.getText());
                args.add(translateDestination.getText());
            }
            if (showParsedCode.isSelected()) {
                c+="-p ";
                args.add("-p");
            }
            if (showCompiledStates.isSelected()) {
                c+="-s ";
                args.add("-s");
            }
            if (toUniversal.isSelected()) {
                c+="-u ";
                args.add("-u");
            }
            if (runMachine.isSelected()) {
                c+="-r ";
                args.add("-r");
            }
            if (limitSteps.isSelected()) {
                c+="-m "+limitStepsField.getText()+" ";
                args.add("-m");
                args.add(limitStepsField.getText());
            }
            if (compactOutput.isSelected()) {
                c+="-c ";
                args.add("-c");
            }
            if (useWidth.isSelected()) {
                c+="-w "+outputWidth.getText()+" ";
                args.add("-w");
                args.add(outputWidth.getText());
            }
            if (redirectOutput.isSelected()) {
                c+="-o '"+outputFile.getText()+"' ";
                args.add("-o");
                args.add(outputFile.getText());
            }
            c+= "'"+assemblerFile.getText()+"'";
            args.add(assemblerFile.getText());
            commandLine.setEnabled(true);
            runButton.setEnabled(true);
        }  else {
            commandLine.setEnabled(false);
            runButton.setEnabled(false);
            c="no input file selected...";
        }
        commandLine.setText(c);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField assemblerFile;
    private javax.swing.JButton browseButton;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JTextField commandLine;
    private javax.swing.JCheckBox compactOutput;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JCheckBox limitSteps;
    private javax.swing.JTextField limitStepsField;
    private javax.swing.JTextField outputFile;
    private javax.swing.JButton outputFileButton;
    private javax.swing.JTextField outputWidth;
    private javax.swing.JButton quitButton;
    private javax.swing.JCheckBox redirectOutput;
    private javax.swing.JButton runButton;
    private javax.swing.JCheckBox runMachine;
    private javax.swing.JCheckBox showCompiledStates;
    private javax.swing.JCheckBox showParsedCode;
    private javax.swing.JButton stopButton;
    private javax.swing.JTextField tapeFile;
    private javax.swing.JButton tapeFileButton;
    private javax.swing.JRadioButton tapeFromAsm;
    private javax.swing.JRadioButton tapeFromFile;
    private javax.swing.JRadioButton tapeFromInput;
    private javax.swing.JTextField tapeString;
    private javax.swing.JCheckBox toUniversal;
    private javax.swing.JCheckBox translateAlphabet;
    private javax.swing.JTextField translateDestination;
    private javax.swing.JTextField translateSource;
    private javax.swing.JCheckBox useWidth;
    // End of variables declaration//GEN-END:variables
}
